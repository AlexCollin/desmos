// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desmos/subspaces/v1beta1/tokenomics.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Tokenomics contains all the information about a specific subspace tokenomics
type Tokenomics struct {
	SubspaceID      string `protobuf:"bytes,1,opt,name=subspace_id,json=subspaceId,proto3" json:"subspace_id" yaml:"subspace_id"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty" yaml:"contract_address"`
	Message         []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty" yaml:"message"`
	Admin           string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
}

func (m *Tokenomics) Reset()         { *m = Tokenomics{} }
func (m *Tokenomics) String() string { return proto.CompactTextString(m) }
func (*Tokenomics) ProtoMessage()    {}
func (*Tokenomics) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fa0b46228891f, []int{0}
}
func (m *Tokenomics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tokenomics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tokenomics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tokenomics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tokenomics.Merge(m, src)
}
func (m *Tokenomics) XXX_Size() int {
	return m.Size()
}
func (m *Tokenomics) XXX_DiscardUnknown() {
	xxx_messageInfo_Tokenomics.DiscardUnknown(m)
}

var xxx_messageInfo_Tokenomics proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Tokenomics)(nil), "desmos.subspaces.v1beta1.Tokenomics")
}

func init() {
	proto.RegisterFile("desmos/subspaces/v1beta1/tokenomics.proto", fileDescriptor_d84fa0b46228891f)
}

var fileDescriptor_d84fa0b46228891f = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x93, 0x5a, 0x15, 0xcf, 0xa2, 0xe5, 0x10, 0x0c, 0x0a, 0xb9, 0x92, 0x41, 0x2a, 0x68,
	0x8e, 0xd2, 0xad, 0x9b, 0x45, 0x84, 0xae, 0xb1, 0x93, 0x4b, 0xb9, 0x24, 0x47, 0x0c, 0xf6, 0x7a,
	0xa5, 0xef, 0x2a, 0xf6, 0x0b, 0x88, 0xa3, 0x1f, 0xc1, 0x8f, 0xe3, 0xd8, 0xd1, 0xe9, 0x90, 0x74,
	0x73, 0xcc, 0x27, 0x10, 0x73, 0x49, 0x09, 0x6e, 0xef, 0x7e, 0xef, 0xf7, 0x7f, 0x07, 0xef, 0xa1,
	0xcb, 0x98, 0x83, 0x90, 0x40, 0x61, 0x19, 0xc2, 0x9c, 0x45, 0x1c, 0xe8, 0x73, 0x2f, 0xe4, 0x8a,
	0xf5, 0xa8, 0x92, 0x4f, 0x7c, 0x26, 0x45, 0x1a, 0x81, 0x3f, 0x5f, 0x48, 0x25, 0xb1, 0x63, 0x54,
	0x7f, 0xab, 0xfa, 0xa5, 0x7a, 0x76, 0x92, 0xc8, 0x44, 0x16, 0x12, 0xfd, 0xab, 0x8c, 0xef, 0xbd,
	0x36, 0x10, 0x1a, 0x6f, 0x87, 0xe0, 0x31, 0x3a, 0xac, 0x92, 0x93, 0x34, 0x76, 0xec, 0x8e, 0xdd,
	0x3d, 0x18, 0xf6, 0x33, 0x4d, 0xd0, 0x7d, 0x89, 0x47, 0xb7, 0x3f, 0x9a, 0xd4, 0xa5, 0x5c, 0x13,
	0xbc, 0x62, 0x62, 0x3a, 0xf0, 0x6a, 0xd0, 0x0b, 0x50, 0xf5, 0x1a, 0xc5, 0xf8, 0x0e, 0xb5, 0x23,
	0x39, 0x53, 0x0b, 0x16, 0xa9, 0x09, 0x8b, 0xe3, 0x05, 0x07, 0x70, 0x1a, 0xc5, 0xe8, 0xf3, 0x5c,
	0x93, 0x53, 0x93, 0xfe, 0x6f, 0x78, 0xc1, 0x71, 0x85, 0x6e, 0x0c, 0xc1, 0x57, 0x68, 0x5f, 0x70,
	0x00, 0x96, 0x70, 0x67, 0xa7, 0x63, 0x77, 0x5b, 0x43, 0x9c, 0x6b, 0x72, 0x64, 0xe2, 0x65, 0xc3,
	0x0b, 0x2a, 0x05, 0x5f, 0xa0, 0x5d, 0x16, 0x8b, 0x74, 0xe6, 0x34, 0x8b, 0xaf, 0xda, 0xb9, 0x26,
	0x2d, 0xe3, 0x16, 0xd8, 0x0b, 0x4c, 0x7b, 0xd0, 0x7c, 0xfb, 0x20, 0xd6, 0x70, 0xf4, 0x99, 0xb9,
	0xf6, 0x3a, 0x73, 0xed, 0xef, 0xcc, 0xb5, 0xdf, 0x37, 0xae, 0xb5, 0xde, 0xb8, 0xd6, 0xd7, 0xc6,
	0xb5, 0x1e, 0x68, 0x92, 0xaa, 0xc7, 0x65, 0xe8, 0x47, 0x52, 0x50, 0xb3, 0xdd, 0xeb, 0x29, 0x0b,
	0xa1, 0xac, 0xe9, 0x4b, 0xed, 0x2c, 0x6a, 0x35, 0xe7, 0x10, 0xee, 0x15, 0xab, 0xed, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xdf, 0xbc, 0x6f, 0x4b, 0xb7, 0x01, 0x00, 0x00,
}

func (m *Tokenomics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tokenomics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tokenomics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTokenomics(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTokenomics(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTokenomics(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubspaceID) > 0 {
		i -= len(m.SubspaceID)
		copy(dAtA[i:], m.SubspaceID)
		i = encodeVarintTokenomics(dAtA, i, uint64(len(m.SubspaceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenomics(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenomics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tokenomics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubspaceID)
	if l > 0 {
		n += 1 + l + sovTokenomics(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTokenomics(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTokenomics(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTokenomics(uint64(l))
	}
	return n
}

func sovTokenomics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenomics(x uint64) (n int) {
	return sovTokenomics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tokenomics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenomics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tokenomics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tokenomics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubspaceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenomics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenomics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubspaceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenomics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenomics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTokenomics
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenomics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenomics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenomics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenomics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenomics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenomics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenomics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenomics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenomics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenomics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenomics
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenomics
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenomics
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenomics        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenomics          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenomics = fmt.Errorf("proto: unexpected end of group")
)
